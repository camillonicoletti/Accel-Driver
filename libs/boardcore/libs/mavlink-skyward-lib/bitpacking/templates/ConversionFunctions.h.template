/**
 * Copyright (c) 2019 Skyward Experimental Rocketry
 * Authors: Luca Erbetta
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#pragma once
#include <cstdint>
#include <type_traits>

template<typename T>
inline uint64_t discretizeRange(T value, T min, T max, unsigned int resolution)
{
    static_assert(std::is_arithmetic<T>::value, "T must be an arithmetic type (float, int, etc)");

    if (value < min)
    {
        return 0;
    }
    else if (value > max)
    {
        return resolution - 1;
    }

    return static_cast<uint64_t>((value - min) * resolution / (max - min));

}

template <typename T>
inline T undiscretizeRange(uint64_t value, T min, T max,
                           unsigned int resolution)
{
    static_assert(std::is_arithmetic<T>::value, "T must be an arithmetic type (float, int, etc)");

    return static_cast<T>(value * (max - min) / resolution + min);
}


$classes