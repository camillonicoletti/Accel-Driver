/**
 * Copyright (c) 2019 Skyward Experimental Rocketry
 * Authors: Luca Conterio, Luca Erbetta
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#pragma once

#include "bitpacking/BitPacker.h"
#include "mavlink_lib/$folder/mavlink.h"
#include "bitpacking/$folder/ConversionFunctions.h"

class ${telemetry_name_ccase}Packer
{
public:
    static constexpr int ${mav_tm_name}_PACKET_SIZE            = $tm_total_size;
    static constexpr int ${mav_tm_name}_SINGLE_PACKET_SIZE_BITS = $tm_partial_size;

    static_assert(MAVLINK_MSG_${mav_tm_name}_FIELD_PAYLOAD_LEN == ${mav_tm_name}_PACKET_SIZE,
                  "Payload size mismatch! Mavlnk payload size differes from declared size. Maybe your mavlink definitions are outdated?");




    ${telemetry_name_ccase}Packer(uint8_t *packet) : packet(packet), bitpacker(packet, ${mav_tm_name}_PACKET_SIZE)
    {
    }

    $pack_functions

    $unpack_functions

private:
    enum FieldIndex
    {
$field_indices
    };

    enum FieldSize
    {
$field_sizes
    };

    uint8_t *packet;
    BitPacker bitpacker;
};